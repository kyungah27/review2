<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- [컴포넌트 스캔 범위: dao, service] -->
	<context:component-scan base-package="com.uver" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
	</context:component-scan>
	

	<!-- [DB] -->
 	<!--database.properties파일 read  --> 
   	<context:property-placeholder location="classpath:resources/config/database.properties"/>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driver}"/>
	    <property name="url"             value="${jdbc.url}"/>
	    <property name="username"        value="${jdbc.username}"/>
	    <property name="password"        value="${jdbc.password}"/>  
		<!-- 최대 접속 허용 개수 -->
		<property name="maxActive"       value="10"/>
		<!-- 여분으로 남겨질 Connection -->
		<property name="maxIdle"         value="8"/>
		<!-- DB연결이 반환되는 Timeout =-1(무한대기) -->
		<property name="maxWait"         value="50000"/>
		<!-- Connection이 잘못관리되어 버려진 연결을 찾아 재활용 여부 -->
		<property name="removeAbandoned" value="true"/>
		<!-- 버려진 연결로 인식할 기본 시간(초) -->
		<property name="removeAbandonedTimeout" value="60"/>
	</bean>
	
	<!-- [jdbcTemplate] -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg name="dataSource" ref="dataSource" />
	</bean>
	
	
	<!-- [dao, service] -->





   <!-- [File Upload] -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 1024*1024*10 : 10MB 용량제한 -->
		<property name="maxUploadSize" value="10485760" />
		<property name="maxInMemorySize" value="10485760" />
	</bean>
   <!-- //File Upload -->
	





	<!-- JoinService transaction  -->
	<bean id="JointransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="JoinTxAdvice" transaction-manager="JointransactionManager">
		<tx:attributes>
			<tx:method name="*" read-only="true" />
			<tx:method name="doDel*" read-only="false" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* com.uver..service.Join*.*(..))" id="joinTxPointCut" />
		<aop:advisor advice-ref="JoinTxAdvice" pointcut-ref="joinTxPointCut" />
	</aop:config>
	<!-- //JoinService transaction  -->


































	<!-- 강의시간에 한 것 (추후 정리) *********************************************** -->
	
<!-- 	[transaction, aop]
	transaction manager
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	트랜잭션 advice 설정
   <tx:advice id="txAdvice" transaction-manager="transactionManager">
   	  <tx:attributes>
   	    get으로 시작하는 모든 메소드는 read-only="true" 트랜잭션관리 대상에서 제외
   	  	<tx:method name="get*" read-only="true"/>
   	  	up으로 시작하는 모든 메소드는 read-only="false" 트랜잭션관리 대상
   	  	<tx:method name="up*" read-only="false"/>
   	  </tx:attributes>
   </tx:advice>
   
    <aop:config>  
      <aop:pointcut expression="execution(* com.uver.example..*ServiceImpl.*(..))" id="txPointCut"/>
      <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
   </aop:config>
		
	[email]
	JavaMailSenderImpl:운영(Mail보내기)
   <bean id="mailSenderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl">
   		<property name="session" ref="emailSession"></property>
   </bean>
   
   DummyMailService:개발(Mail not send)
   <bean  id="dummyMailService" class="com.uver99.example.DummyMailService">
   </bean>
   
    email Session
   <bean id="emailSession" class="javax.mail.Session">
   		<constructor-arg index="0">
   			<props>
   				<prop key="mail.smtp.host">smtp.naver.com</prop>
   				<prop key="mail.smtp.port">465</prop>
   				<prop key="mail.smtp.auth">true</prop>
   				<prop key="mail.smtp.ssl.enable">true</prop>
   				<prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
   			</props>
   		</constructor-arg>
   		<constructor-arg index="1" ref="authenticator"/>
   </bean>
   
      PasswordAuthentication
   <bean id="passwordAuth" class="javax.mail.PasswordAuthentication">
   	  <constructor-arg index="0">
   	  	<value>skyblueninz@naver.com</value>
   	  </constructor-arg>
   	  <constructor-arg index="1">
   	  	<value>비번</value>
   	  </constructor-arg>
   </bean>
   
   Authenticator
   <bean id="authenticator" class="javax.mail.Authenticator">
   	  <lookup-method name="getPasswordAuthentication" bean="passwordAuth" />
   </bean>
 -->

</beans>
